builtin unset VSCODE_INJECTION
[ -z "$VSCODE_SHELL_INTEGRATION" ]
[ -n "${VSCODE_ENV_REPLACE:-}" ]
[ -n "${VSCODE_ENV_PREPEND:-}" ]
[ -n "${VSCODE_ENV_APPEND:-}" ]
__vsc_regex_environment="^CYGWIN*|MINGW*|MSYS*"
[[ "$(uname -s)" =~ $__vsc_regex_environment ]]
__vsc_is_windows=0
__vsc_regex_histcontrol=".*(erasedups|ignoreboth|ignoredups).*"
[[ "$HISTCONTROL" =~ $__vsc_regex_histcontrol ]]
__vsc_history_verify=1
builtin unset __vsc_regex_environment
builtin unset __vsc_regex_histcontrol
__vsc_initialized=0
__vsc_original_PS1="$PS1"
__vsc_original_PS2="$PS2"
__vsc_custom_PS1=""
__vsc_custom_PS2=""
__vsc_in_command_execution="1"
__vsc_current_command=""
__vsc_nonce="$VSCODE_NONCE"
unset VSCODE_NONCE
__vsc_stable="$VSCODE_STABLE"
unset VSCODE_STABLE
[ "$__vsc_stable" = "0" ]
[[ -n "${bash_preexec_imported:-}" ]]
__vsc_dbg_trap="$(__vsc_get_trap DEBUG)"
[[ -z "$__vsc_dbg_trap" ]]
[[ "$__vsc_dbg_trap" != '__vsc_preexec "$_"' && "$__vsc_dbg_trap" != '__vsc_preexec_all "$_"' ]]
trap '__vsc_preexec_all "$_"' DEBUG
__vsc_original_prompt_command=${PROMPT_COMMAND:-}
echo hello bash
touch questionnaire.sh
sh questionnaire.sh
bash questionnaire.sh
which bash
./questionnaire.sh
ls --color=auto -l
chmod +x questionnaire.sh
ls --color=auto -l
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
--help
echo --help
man echo
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
./questionnaire.sh
touch countdown.sh
ls --color=auto -l
chmod +x countdown.sh
./countdown.sh
./countdown.sh arg1 arg2 arg3
./countdown.sh arg1 arg2 arg3
__vsc_prompt_cmd_original
help
man if
help if
./countdown.sh arg1 arg2 arg3
./countdown.sh arg2
./countdown.sh arg1
./countdown.sh arg1
./countdown.sh arg2
./countdown.sh 4
./countdown.sh 5
help
__vsc_prompt_cmd_original
help [[ expression ]]
help test
./countdown.sh 5
[[ 4 -le 5 ]]
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaad
?
echo $?
[[ 4 -le 5 ]]
echo $?
[[ 4 -ge 5 ]]
echo ????
[[ 4 -ge 5 ]]
echo $?
[[ 4 -ge 5 ]]
[[ 10 -ne 5 ]]
bad_command
bad_command
ls --color=auto
ls --color=auto
ls --color=auto -y
help test
[[ -a countdown.sh ]]
[[ -a bad_file.txt ]]
ls --color=auto -l
[[ -x countdown.sh ]]
help
help [[
help [[
[[ -x countdown.sh && 5 -le 4 ]]
[[ -x countdown.sh || 5 -le 4 ]]
./countdown.sh 1
./countdown.sh 0
help
./countdown.sh 10
help
ls --color=auto /
ls --color=auto /bin
man sleep
sleep 3
./countdown.sh 3
./countdown.sh 3
./countdown.sh 1
help while
./countdown.sh 5
touch bingo.sh
chmod +x bingo.sh
./bingo.sh
printenv
__vsc_prompt_cmd_original
echo LANG
LANG echo
echo
echo $LANG
declare -p
echo $RANDOM
./bingo.sh
./bingo.sh
./bingo.sh
I=0
echo I
__vsc_prompt_cmd_original
echo $I
(( I++ ))
echo $I
help let
(( I += 10 ))
echo I
echo $I
$(( I + 4 ))
echo $(( I + 4 ))
echo $I
J=$(( I - 6 ))
echo $J
echo $(( J bingo.sh countdown.sh questionnaire.sh 5 + 25 ))
echo $J
declare -p
declare -p J
declare -p RANDOM
echo RANDOM % 75
echo $(( RANDOM % 75 ))
echo $(( RANDOM % 75 + 1 ))
./bingo.sh
./bingo.sh
help let
help test
./bingo.sh
./bingo.sh 45
./bingo.sh 45
__vsc_prompt_cmd_original
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
./bingo.sh
touch fortune.sh
chmod +x fortune.sh
./fortune.sh
ARR=("a" "b" "c")
echo ${ARR[1]}
echo $@
echo $*
echo ${ARR[]}
echo ${ARR[@]}
declare -p
declare -p ARR
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
help
help function
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
./fortune.sh
help
help until
./fortune.sh
help [[ expression ]]
[[ hello == hello ]]
[[ hello == world ]]
[[ hello =~ el ]]
[[ hello =~ el ]]
[[ "hello world" =~ "lo wor" ]]
[[ "hello world" =~ ^h ]]
[[ "hello world" =~ ^h.+d$ ]]
VAR="hello world"
echo VAR
echo $VAR
[[ $VAR == "hello world" ]]
[[ $VAR =~ \?$ ]]
[[ test? =~ \?$ ]]
./fortune.sh
./fortune.sh
./fortune.sh
touch five.sh
chmod +x five.sh
./five.sh
clear
./five.sh
help
type
help type
type echo
type read
type if
type then
type bash
type psql
type ./five.sh
exit
